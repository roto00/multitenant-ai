# AWS Secrets Manager CSI Driver for Kubernetes
# This enables pods to access secrets from AWS Secrets Manager

---
# Namespace for the CSI driver
apiVersion: v1
kind: Namespace
metadata:
  name: aws-secrets-manager-csi-driver
  labels:
    name: aws-secrets-manager-csi-driver

---
# Service Account for the CSI driver
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-secrets-manager-csi-driver
  namespace: aws-secrets-manager-csi-driver
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::665832050599:role/multitenant-ai-poc-secrets-manager-csi-role

---
# ClusterRole for the CSI driver
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aws-secrets-manager-csi-driver
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list", "watch", "create", "update", "patch"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "watch", "list", "delete", "update", "create"]

---
# ClusterRoleBinding for the CSI driver
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aws-secrets-manager-csi-driver
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aws-secrets-manager-csi-driver
subjects:
- kind: ServiceAccount
  name: aws-secrets-manager-csi-driver
  namespace: aws-secrets-manager-csi-driver

---
# DaemonSet for the CSI driver
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: aws-secrets-manager-csi-driver
  namespace: aws-secrets-manager-csi-driver
spec:
  selector:
    matchLabels:
      app: aws-secrets-manager-csi-driver
  template:
    metadata:
      labels:
        app: aws-secrets-manager-csi-driver
    spec:
      serviceAccountName: aws-secrets-manager-csi-driver
      containers:
      - name: aws-secrets-manager-csi-driver
        image: public.ecr.aws/aws-secrets-manager/secrets-store-csi-driver-provider-aws:1.0.r2-1-gd4b4b4b4
        imagePullPolicy: Always
        args:
        - --endpoint=$(CSI_ENDPOINT)
        - --logtostderr
        - --v=2
        env:
        - name: CSI_ENDPOINT
          value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
        - name: AWS_REGION
          value: us-west-2
        volumeMounts:
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: mountpoint-dir
          mountPath: /var/lib/kubelet/pods
          mountPropagation: Bidirectional
        ports:
        - name: healthz
          containerPort: 9808
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          failureThreshold: 5
        resources:
          requests:
            memory: 50Mi
            cpu: 10m
          limits:
            memory: 100Mi
            cpu: 100m
      - name: csi-driver-registrar
        image: public.ecr.aws/eks-distro/kubernetes-csi/csi-node-driver-registrar:v2.8.0-eks-1-28-1
        args:
        - --csi-address=$(ADDRESS)
        - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
        - --v=2
        env:
        - name: ADDRESS
          value: /var/lib/csi/sockets/pluginproxy/csi.sock
        - name: DRIVER_REG_SOCK_PATH
          value: /var/lib/kubelet/plugins/aws-secrets-manager.csi.aws.com/csi.sock
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: registration-dir
          mountPath: /registration
        resources:
          requests:
            memory: 50Mi
            cpu: 10m
          limits:
            memory: 100Mi
            cpu: 100m
      volumes:
      - name: socket-dir
        emptyDir: {}
      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry/
          type: DirectoryOrCreate
      - name: mountpoint-dir
        hostPath:
          path: /var/lib/kubelet/pods
          type: DirectoryOrCreate
      tolerations:
      - operator: Exists
        effect: NoSchedule
      - operator: Exists
        effect: NoExecute

---
# StorageClass for Secrets Manager
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: aws-secrets-manager
provisioner: secrets-store.csi.aws.com
parameters:
  secretProviderClass: "aws-secrets-manager"
reclaimPolicy: Delete
volumeBindingMode: Immediate

---
# SecretProviderClass for shared platform secrets
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: shared-platform-secrets
  namespace: default
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "multitenant-ai-poc/shared/database-password"
        objectType: "secretsmanager"
        objectAlias: "database-password"
      - objectName: "multitenant-ai-poc/shared/redis-password"
        objectType: "secretsmanager"
        objectAlias: "redis-password"
      - objectName: "multitenant-ai-poc/shared/jwt-secret"
        objectType: "secretsmanager"
        objectAlias: "jwt-secret"
  secretObjects:
  - secretName: shared-platform-secrets
    type: Opaque
    data:
    - objectName: "database-password"
      key: "database-password"
    - objectName: "redis-password"
      key: "redis-password"
    - objectName: "jwt-secret"
      key: "jwt-secret"

---
# SecretProviderClass for tenant 1 secrets
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: tenant-1-secrets
  namespace: tenant-1
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "multitenant-ai-poc/tenant-1/database-password"
        objectType: "secretsmanager"
        objectAlias: "database-password"
      - objectName: "multitenant-ai-poc/tenant-1/redis-password"
        objectType: "secretsmanager"
        objectAlias: "redis-password"
      - objectName: "multitenant-ai-poc/tenant-1/encryption-key"
        objectType: "secretsmanager"
        objectAlias: "encryption-key"
  secretObjects:
  - secretName: tenant-1-secrets
    type: Opaque
    data:
    - objectName: "database-password"
      key: "database-password"
    - objectName: "redis-password"
      key: "redis-password"
    - objectName: "encryption-key"
      key: "encryption-key"

---
# SecretProviderClass for tenant 2 secrets
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: tenant-2-secrets
  namespace: tenant-2
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "multitenant-ai-poc/tenant-2/database-password"
        objectType: "secretsmanager"
        objectAlias: "database-password"
      - objectName: "multitenant-ai-poc/tenant-2/redis-password"
        objectType: "secretsmanager"
        objectAlias: "redis-password"
      - objectName: "multitenant-ai-poc/tenant-2/encryption-key"
        objectType: "secretsmanager"
        objectAlias: "encryption-key"
  secretObjects:
  - secretName: tenant-2-secrets
    type: Opaque
    data:
    - objectName: "database-password"
      key: "database-password"
    - objectName: "redis-password"
      key: "redis-password"
    - objectName: "encryption-key"
      key: "encryption-key"

---
# SecretProviderClass for AI provider secrets
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: ai-provider-secrets
  namespace: default
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "multitenant-ai-poc/ai-providers/openai-api-key"
        objectType: "secretsmanager"
        objectAlias: "openai-api-key"
      - objectName: "multitenant-ai-poc/ai-providers/huggingface-api-key"
        objectType: "secretsmanager"
        objectAlias: "huggingface-api-key"
      - objectName: "multitenant-ai-poc/ai-providers/custom-model-api-key"
        objectType: "secretsmanager"
        objectAlias: "custom-model-api-key"
  secretObjects:
  - secretName: ai-provider-secrets
    type: Opaque
    data:
    - objectName: "openai-api-key"
      key: "openai-api-key"
    - objectName: "huggingface-api-key"
      key: "huggingface-api-key"
    - objectName: "custom-model-api-key"
      key: "custom-model-api-key"
